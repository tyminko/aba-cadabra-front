name: AI - Issue

on:
  issues:
    types: [opened, labeled]

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  attempt-fix:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: contains(github.event.issue.labels.*.name, 'ai')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"

      - name: Generate Prompt
        id: generate-prompt
        run: |
          PROMPT="You are operating in a GitHub Actions runner to automatically analyze and fix GitHub issues.

          The GitHub CLI is available as 'gh' and authenticated via 'GH_TOKEN'. Git is available.

          # Context:
          - Repository: ${{ github.repository }}
          - Default Branch: ${{ github.event.repository.default_branch }}
          - Issue Number: ${{ github.event.issue.number }}
          - Issue Title: ${{ github.event.issue.title }}
          - Issue Author: ${{ github.event.issue.user.login }}
          - Issue Body: ${{ github.event.issue.body }}
          - Issue Labels: ${{ join(github.event.issue.labels.*.name, ', ') }}

          # Goal:
          - Analyze the issue and determine if it can be automatically fixed.
          - If a fix is possible, create a new branch from the default branch, make the changes, and push them to the repository.
          - Create a pull request from the new branch to the default branch.
          - If a fix is not possible, leave a comment on the issue indicating that a manual fix is required.

          # Guidelines:
          - Only attempt fixes for clear, well-defined issues.
          - Avoid making changes that could break existing functionality.
          - Be conservative - when in doubt, request manual review.
          - Follow the project's coding standards and conventions."

          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze Issue
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          set -euo pipefail

          # Create a temporary directory for storing the output, and ensure it's cleaned up later
          TEMP_STDOUT="$(mktemp -p "${RUNNER_TEMP}" cursor-out.XXXXXXXXXX)"
          TEMP_STDERR="$(mktemp -p "${RUNNER_TEMP}" cursor-err.XXXXXXXXXX)"

          function cleanup {
            rm -f "${TEMP_STDOUT}" "${TEMP_STDERR}"
          }
          trap cleanup EXIT

          # Keep track of whether we've failed
          FAILED=false

          if ! { cursor-agent -p "${{ steps.generate-prompt.outputs.prompt }}" --force --model gpt-5 --output-format=text 2> >(tee "${TEMP_STDERR}" >&2) | tee "${TEMP_STDOUT}"; }; then
            FAILED=true
          fi

          ERRORS="$(cat "${TEMP_STDERR}")"

          if [[ "${FAILED}" = true ]]; then
            LAST_LINE="$(echo "${ERRORS}" | tail -n1)"
            echo "::error title=Cursor CLI execution failed::${LAST_LINE}"
            echo "See logs for more details"
            exit 1
          fi
